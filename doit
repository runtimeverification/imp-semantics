set -euxo pipefail

cd kimp

verbose=
verbose=--verbose

poetry_run() {
    poetry run -- "$@"
}

haskell_target() {
    poetry run kbuild which haskell
}

build() {
    poetry_run kbuild kompile haskell "$@"
}

prove() {
    poetry_run kimp prove --definition $(haskell_target) ${verbose} ${spec_file} ${spec_module} ${spec_id} "$@"
}

summarize() {
    poetry_run kimp summarize --definition $(haskell_target) ${verbose} ${spec_file} ${spec_module} ${spec_id} "$@"
}

show() {
    poetry_run kimp show-kcfg --definition $(haskell_target) ${verbose} ${spec_file} ${spec_module} ${spec_id} "$@"
}

spec_file=tests/specs/imp-simple-spec.k
spec_module=IMP-SIMPLE-SPEC
# spec_id=branching
spec_id=branching-deadcode

spec_file=tests/specs/imp-sum-spec.k
spec_module=IMP-SUM-SPEC
spec_id=sum-spec
spec_id=two-sum-spec

build
# prove --max-iterations 10
summarize --max-iterations 20
show --to-module --inline-nodes
